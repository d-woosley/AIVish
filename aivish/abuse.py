from re import compile, IGNORECASE, escape
from base64 import b64decode

def check_string(input_text: str) -> str:
    """
        The below list of words/phrases was generated by chatgtp
        in order to prevent general abuse of the tool. However, I
        haven't look through every word and it could cause a
        false positive rickroll. Obviously, if your reading this 
        you should know how to disable the check. It's just for
        script kitties...

        Regardless, if you run into any issues with a false positive
        please submit an issue on the github with the exact wording
        you are wanting to use and I'll update the below list. It
        would be really helpful if you submit an issue for all
        false positives to prevent them in the future... so please
        do!
    """

    find_text = convert_64([
        'ZXh0b3J0aW9u', 'c2V4dG9ydGlvbg==', 'Ym9tYg==', 'dGVycm9yaXN0', 'aG9zdGFnZQ==', 'cmFuc29t',
        'd2Fy', 'Z2Vub2NpZGU=', 'dmlvbGVuY2U=', 'd2VhcG9u', 'bnVjbGVhcg==', 'bWlzc2lsZQ==', 'cmFwZQ==',
        'bXVyZGVy', 'ZXhlY3V0ZQ==', 'c3RhYg==', 'ZXhwbG9kZQ==', 'bWFzc2FjcmU=', 'Ymxvb2Q=', 'c2xhdWdodGVy',
        'dG9ydHVyZQ==', 'YWJkdWN0', 'ZXhlY3V0aW9u', 'bHluY2g=', 'YnJ1dGFs', 'a2lsbA==', 'YXJzb24=',
        'ZXh0cmVtaXN0', 'ZmFuYXRpYw==', 'YmVoZWFk', 'bW9sb3Rvdg==', 'SUVE', 'Ymlvd2VhcG9u',
        'Y2hlbWljYWwgd2VhcG9u', 'YmlvdGVycm9yaXNt', 'ZXNwaW9uYWdl', 'aG9taWNpZGU=', 'cGF0cmljaWRl',
        'bWF0cmljaWRl', 'ZnJhdHJpY2lkZQ==', 'ZmlsaWNpZGU=', 'aW5mYW50aWNpZGU=', 'Z2Vub2NpZGU=',
        'bWFzcyBtdXJkZXI=', 'c2VyaWFsIGtpbGxlcg==', 'ZHJ1ZyBjYXJ0ZWw=', 'bmFyY28=', 'dHJhZmZpY2tpbmc=',
        'c211Z2dsZQ==', 'a2lkbmFw', 'ZXh0b3J0', 'YmxhY2ttYWls', 'aGFtYXM=', 'aXNyYWVs', 'cGFsZXN0aW5l',
        'Z2F6YQ==', 'dWtyYWluZQ==', 'cnVzc2lh', 'bW9zY293', 'a2lldg==', 'ZG9uZXRzaw==', 'bHVnYW5zaw==',
        'c2VwYXJhdGlzdA==', 'dGVycm9y', 'c3VpY2lkZQ==', 'amloYWRp', 'amloYWQ=', 'cm9ja2V0', 'bWlzc2lsZQ==',
        'ZHJvbmUgc3RyaWtl', 'YWlyc3RyaWtl', 'bGFuZG1pbmU=', 'c25pcGVy', 'bWFydHly', 'd2FyIGNyaW1l',
        'ZXRobmljIGNsZWFuc2luZw==', 'YXRyb2NpdHk=', 'cmVmdWdlZQ==', 'ZGlzcGxhY2VkIHBlcnNvbg==', 'c2V4',
        'cG9ybg==', 'aGVudGFp', 'bnVkZQ==', 'eHh4', 'ZXhwbGljaXQ=', 'Y2hpbGQgYWJ1c2U=', 'bW9sZXN0',
        'cGVkb3BoaWxl', 'aW5jZXN0', 'cmFwZQ==', 'Z3Jvb21pbmc=', 'cHJvc3RpdHV0ZQ==', 'cHJvc3RpdHV0aW9u',
        'YnJvdGhlbA==', 'cG9ybm9ncmFwaHk=', 'b2JzY2VuaXR5', 'bGV3ZA==', 'dm95ZXVy', 'ZmV0aXNo',
        'YmVzdGlhbGl0eQ==', 'bmVjcm9waGlsaWE=', 'c2FkaXNt', 'bWFzb2NoaXNt', 'YmRzbQ==', 'b3JneQ==',
        'c29kb215', 'c2V4dWFsIGFzc2F1bHQ=', 'c2V4dWFsIGhhcmFzc21lbnQ=', 'dHJhZmZpY2tpbmc=',
        'Y2hpbGQgcG9ybm9ncmFwaHk=', 'cmV2ZW5nZSBwb3Ju', 'c2V4dGluZw==', 'b2JzY2VuZQ==', 'aW5kZWNlbnQ=',
        'c211dA==', 'ZXJvdGljYQ==', 'cmFwZSBmYW50YXN5', 'bm9uY29uc2Vuc3VhbA==', 'bW9sZXN0YXRpb24=',
        'cGVkb3BoaWxpYQ==', 'dW5kZXJhZ2U=', 'ZXhoaWJpdGlvbmlzbQ==', 'cHJvc3RpdHV0aW9u', 'aW5jZXN0dW91cw==',
        'a2luaw==', 'cGVydmVydA==', 'cGVydmVyc2lvbg==', 'cHJlZGF0b3I=', 'cHJlZGF0b3J5', 'bHVyaW5n',
        'c2V4dWFsbHkgZXhwbGljaXQ=', 'c3VpY2lkZQ==', 'c2VsZi1oYXJt', 'Y3V0dGluZw==', 'b3ZlcmRvc2U=',
        'aGFuZw==', 'ZHJvd24=', 'cG9pc29u', 'c2VsZi1tdXRpbGF0aW9u', 'c3RhcnZhdGlvbg==', 'c2xpdCB3cmlzdA==',
        'Y2FyYm9uIG1vbm94aWRl', 'c2hvb3Qgb25lc2VsZg==', 'a2lsbCBvbmVzZWxm', 'c3VpY2lkYWw=', 'aGFuZyBvbmVzZWxm',
        'ZW5kIGxpZmU=', 'ZGllIGJ5IHN1aWNpZGU=', 'dGFrZSBvd24gbGlmZQ==', 'ZHJ1Z3M=', 'aGVyb2lu', 'Y29jYWluZQ==',
        'bWV0aA==', 'bWV0aGFtcGhldGFtaW5l', 'Y3JhY2s=', 'b3Bpb2lk', 'ZmVudGFueWw=', 'bWFyaWp1YW5h',
        'Y2FubmFiaXM=', 'TFNE', 'ZWNzdGFzeQ==', 'TURNQQ==', 'cHN5Y2hlZGVsaWNz', 'aGFsbHVjaW5vZ2Vu',
        'b3ZlcmRvc2U=', 'bmFyY290aWM=', 'YW1waGV0YW1pbmU=', 'YmFyYml0dXJhdGU=', 'c3RpbXVsYW50',
        'dHJhbnF1aWxpemVy', 'b3Bpb2lkIGNyaXNpcw==', 'ZHJ1ZyBhYnVzZQ==', 'c3Vic3RhbmNlIGFidXNl',
        'ZHJ1ZyBhZGRpY3Rpb24=', 'YWRkaWN0', 'c2hvb3QgdXA=', 'ZHJ1ZyBkZWFsZXI=', 'cHVzaGVy', 'Y2FydGVs',
        'bmFyY28=', 'b3ZlcmRvc2U=', 'ZHJ1ZyB0cmFmZmlja2luZw==', 'ZHJ1ZyBsb3Jk', 'ZnVjaw==', 'c2hpdA==',
        'Yml0Y2g=', 'YXNzaG9sZQ==', 'YmFzdGFyZA==', 'ZGFtbg==', 'ZGljaw==', 'cGlzcw==', 'cHVzc3k=',
        'Y29jaw==', 'Y3VudA==', 'dHdhdA==', 'bW90aGVyZnVja2Vy', 'YXNz', 'c2x1dA==', 'd2hvcmU=', 'ZnVja2Vy',
        'c2NyZXc=', 'Ym9sbG9ja3M=', 'd2Fua2Vy', 'YnVnZ2Vy', 'Ymxvb2R5', 'YXJzZQ==', 'Ym9sbG9ja2luZw==',
        'bmlnZ2Vy', 'bmlnZ2E='
        ])
    
    swap_text = convert_64([
        "TmV2ZXIgZ29ubmEgZ2l2ZSB5b3UgdXAsIG5ldmVyIGdvbm5hIGxldCB5b3UgZG93biwgbmV2ZXIgZ29ubmEgcnVuIGFyb3VuZCBhbmQgZGVzZXJ0IHlvdS4="
        ])

    # Combine phrases into a single regex pattern
    pattern = compile(r'\b(?:' + '|'.join(map(escape, find_text)) + r')\b', IGNORECASE)
    if pattern.search(input_text):
        return swap_text[0]
    return input_text


def convert_64(list):
    newlist = []
    for word in list:
        bytes_list = b64decode(word)
        newlist.append(bytes_list.decode('utf-8'))
    return newlist